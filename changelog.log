26. 3. 2024
I started to write the code in python in Fiji environment, so that I could use modules and the overall python logic and syntax, and keep the overall structure more clean and transparent. Unfortunatelly, this proved cumbersome and would require rewriting a lot of existing code. So I decided to use Fiji macro instead. This has the advantage that I can use lots of functions and code that I have written previously.


27. 3. 2025
Started writing the actual code.

It is recommended that users first run the "correct and project" macro, define the ROIs from SUM/MAX intensity projections and then use them with the corrected images.
- TODO: some renaming magic will need to take place here, otherwise the ROI handling will be cumbersome and require the user to rename things. Maybe search for SUM/MAX/AVG in ROISet names and remove them?

I wanted to redo the processing logic behind the recursive processing of files to avoid evaluating if/else for each file separately, so I wanted to first select what should be done (create, display, analyze) - only once, then go through all the files. Apparently, this can't be done in Fiji macro language without repeating the whole processFolder function in each individual process function.

**Create kymograms**
From each ROI a kymogram is created and scaled to stretch it in the 'y' dimension for better display. Kymographs scaled without interpolation and using 'bilinear' interpolation are saved for each ROI. The scaled kymograms have a separate folder inside the folder with kymograms.

**Display kymograms**
Added function for displaying kymograms after they are made (they are not made correctly at this stage), asks user to specify ROIs for which they want to display kymograms. This is useful for larger images with lots of ROIs. Currently, user can specify a range, not a comma-delimited list. I have developed a function to handle such input before, for Quantify macro, so I might implement it here as well.

**Analyze kymograms** structure in place:
- there are three options for the user to chose from: create, display and analyze kymograms; after each is finished, the initial dialog will be displayed again, until the user selects "EXIT". Short help message is included.
- macro will presuppose that ROIs are already defined AND that the data structure is exactly the same as for the published "microscopy analysis" macros. I thought I might add this functionality to this macro as a module or a script to be loaded from a spearate file, but was unable to make it work.


28. 3. 2025
**Display kymograms**
- tweaked to only count files, not folders (there is a 'scaled/' folder in each folder with kymograms).
- updated how input is handled based on sort_channels() function from 'Quantify' macro; this is an updated version that can handle a mixture of ranges and individual numbers, sorts them in ascending order and removes duplicates, if present.
- In the current version, the "scaled" option shows only kymograms scaled without interpolation.


31. 3. 2025
***version 0.1.3***

**initial dialog window**
- position set so that it is in to top right corener of the screen, just below the Fiji app

**Display kymograms**
- fix behaviour for "out of bounds input" -> selected ROIs are converted to first (for input below 1) or last (for input too high) ROI
- reworked the selection of "next image" display. Now it contains options to: display previous, current, next, and also directly choose from the list of file in the current directory. This required quite a bit of gymnastics and changing how some loops and functions work.
- Upon opening an image, no ROIs are first shown and user is asked to decide which to display. Same when going to the next image.
- window positioning - images are opened in the top left corner, the dialog window in the bottom right, so that it does not get in the way of open kymograms
- in the dialog window, the name of current image, and also file counter (x/y) is shown


1. 4. 2025
**Analyze kymograms**
- inital dialog window asks for LUTs to be used for channel 1 and 2 - if there is another structure, this will need to be considered here, fewer or more channels are possible

**Create kymograms**
- images to make kymograms from are looked for in the "data-processed" folder!!!
	-> ROISet file handling will need to be sorted out, perhaps rename them to correcpond to the original image name, i.e., without -SUM, -MAX, -AVG, -processed, -corr; this requires updating of the other macros as well!!!
- LUTs specified in initial window are used; kymogram creation works correctly
- if there are kymograms already made for some of the images, user is warned and asked if the old ones should be overwritten. Currently, not overwriting older kymograms does not save any processing time. The macro looks if there are some and then gives a warning if there is at least one. No list is made that could be checked in the process_folder() function. I am not sure if it actually makes any sense to check the presence of kymograms, except to save a bit of time when **Create kymograms** is selected by mistake

**Display kymograms**
- the position and size of the current image is set so that it is displayed in the top left corner of the screen, size screenWidth/3 x screenWidth/3 - will this cause issues for non-square images? Apparently not - the longer side is set to screenWidth/3
- positioning of kymograms - in the are to the right of the image, the kymograms are tiled until they reach the right corner of the screen, then next row starts at screenWidth/3 from the left, etc. Problems will arise if too many kymograms are to be displayed for an image (especially the scaled ones); but I think I will leave it like this, as displaying 65 kymograms for a single image does not make much sense anyway
- added option to display 'scaled-interpolated (bilinear)' kymograms
- changed the order of inputs in the dialog window for kymogram selection: first what image, then what kymograms, then what type of kymograms.
- moved image counter to the first line after "curent image"


3. 4. 2025
**Analyze kymograms**
- defined a "printArray(array)" function to make printing of arrays easier (for debugging)
- unified naming scheme for variables (names use underscores to separate words) and functions (dromedarycase [medial capitals])
- decided on naming ROISets for any type of image with the RAW image name (+ROISet.zip), i.e., excluding suffixes like "-AVG", "-SUM", "-MAX", "-MIN", "-processed", "-corr"). This will need to be implemented in previous macros, and will be considered a major change.

**Create kymograms**

**Display kymograms**
- fixed displaying of ROIs - parsing numbers was required as soon as range is "-"-separated to correctly handle ranges like 9-10
- simplified opening of ROIs, since they are explicitly specified by the user and are allways called "ROI_x" (x being the user input), they can be opened by directly calling the files, which holds true for interpolated images
 
**Analyze kymograms**
- rewrote 'fourier filtering' to be less repetitive, resulting in code that is harder to understand...
- updated 'fourier filtering' to get cleaner traces (by removing more than the specified quadrants, so that the central part of fourier image is removed as well
- made placeholder functions to write down various analysis options


4. 4. 2025
**general**
- formatted changelog

**Analyze kymograms**
*fourier filtering*
	-> included Gauss filtering before processing to get cleaner images without high frequency noise
	-> fixed filtering of quadrants - not all was removed as intended


7. 4. 2025
***version 0.1.4***

**Display kymograms**
- added option to exclude kymograms from display+analysis and include them back again - this boils down to adding the "-excluded" suffix to the raw kymogram filename and using an array to hold information about which kymograms are to be ignored when opening. This required defining two helper functions.


8. 4. 2025
**general**
- added some comments for functions ("docstrings") etc.

**Analyze kymograms**
*fourier filtering*
	-> fixed how the "quadrant" removal for "static" trajectories works - it used roation and removal of squares, which resulted in removal of more information than necessary; now nothing is rotated and triangles are removed instead
	-> this lead to reorganization of the function a bit
	-> fixed contrast stretching so that all images of dominant trajectory directions use the same contrast settings; I thought this was already the case, but it was not. Now the merged images correspond to the original iamges much better


9. 4. 2025
***version 0.1.5***

**general**
- renamed variables to make the code easier to understand and more unified (kymo_dir -> dir_kymograms, roi_Dir -> dir_ROIs etc)

**Display kymograms**
- added option to display filtered kymograms if they exist, this needs to be adjusted to work properly

**Analyze kymograms**
- started implementing fourier filtering


10. 4. 2025
***version 0.2.0***
- started development of this version
- overal logic was changed a bit, see details below; not backwards compatible with 0.1.5

**general**
- I wanted to separate prepare() into prepareImage() and prepareDirs(), but a simple division resulted in errors whose origin I did not understand. I will probably try again later, since it does not make sense to open microscopy images for kymogram analysis.

**Create kymograms**
- Only raw kymograms are saves, into 'raw' folder within the 'kymogram' directory. The scaled are cereated on demand.

**Display kymograms**
- scaled versions of kymograms are created on demand within this interface, the user can now specify the degree of stretch in the y direction. This change was made to enable scaling of filtered kymograms without the need to create more folders and save more images. This makes the code simpler and more flexible. It also makes the display of scaled kymograms slower, but it saves quite a bit of HDD space and also some programming headache.

**Analyze kymograms**
- finished incorporating Fourier filtering of directions into the main macro; BUT, only channel 1 is currently processed this way. This will need to be corrected!!!


15. 4. 2025
**general**
- implemented handling of channels - this turned out to be more complicated than anticipated, but should now be complete
- the initial window asks the user to specify channels and their LUTs. The inputs are strings, which are later converted to arrays

**Display kymograms**
- fixed how the macro looks for filtered kymograms, as I had to change the directory names for these (based on specified channels) - it does not cycle through channels, but looks for folders that start with "filtered"
- fixed Display for filtered kymograms by separating the displayKymograms() function into two, defining a new showKymograms() function that takes in x and y offsets as inputs -> the position of the first kymogram is specified this way. The function returns y offset + height of the last image, so the kymograms for the next channel are loaded starting in the next row, i.e., corresponding kymograms are displayed below each other
- the raw kymograms are now also displayed in this separated form, in grayscale

**Analyze kymograms**
- handling of channels implemented - the user is asked to specify the channels to be analyzes, only at the beginning. However, the query is placed at a spot within a cycle, so I had to use a dirty trick to only have it displayed once: if (file_counter == 0) - this originates in the inability to pass functions as arguments into other functions, which dictates how the whole macro logic operates.
- Fourier filtering - saving of filtered kymograms for all specified channels, in separate folders, rewrote macro to accomodate for this
- run("Extend Image Borders",...); command does not work as of now at home computers (remote work today); so I have written a function that does this.

17. 4. 2025

**Display kymograms**
- added option for the user to choose to display kymograms (raw or filtered; not filtered-merged) in greyscale

*this concludes the switch from 0.1.5 to 0.2.0*
- in the stored 0.2.0 everything implemented so far works, from creation of kymograms, to their display, to filtering into dominant directions (fourier). In the following versions, the development of quantification methods and parameters will be the main focus and I plan to change versions (last digit) after each new method is implemented.

- background intensity measurement needs to be implemented so that the CV measurements in kymograms make sense


18. 4. 2025
*version 0.2.1 under development*
**general**
- separated prepare() and prepROIs(), as I don't need to open ROI manager every time
- adjusted some variable names to make their use and meaning clearer
-> these resulted in some unforseen issues, but I fixed them (global variables rule)

**Analyze kymograms**
- implemented background measurement (function taken from the Quantify macro)
- implemented coefficient of variation analysis for each kymogram - first, CV is estimated for each pixel column in the kymogram (i.e., along the time axis), then the numbers are averaged. CV for Cwr1 is (from the limited test set) 2-3 times higher than that of Sur (CV_Sur7 ~ 0.1)

*this concludes development of version 0.2.1*


22. - 23. 4. 2025
*version 0.2.2 under development*
**Analyze kymograms**
- calculation of autocorrelation functions added; for each pixel column (i.e., along time axis) intensity profile in the kymogram; now I need to figure out what to do with it


24. 4. 2025
**Analyze kymograms**
- realized that the autocorrelation function is not very useful here


25. 4. - 15. 5. 2025
- finalized version 2.2.0

**general**
- added: brief summary of the macro and comments for all functions
- clearly marked main sections in the code, using lines of asteriskes as dividers, and titles in capitals
- reorganized the code to reflect clean code practices - lot of functions divided into smaller functions
- order of function definitions is as they come in the code, the actual definition following the last use (as soon as possible, based on hierarchy and order)
- updated help messages
- implemented results output into a csv file, including an option to resume aborted analysis (somme issues of unknown origin with this), using lists of temporary and processed files; this invovled addition of a large amount of addition functions. These were mostly copied from the "Quantify" macro

**Draw ROIs**
- added option for the user to define ROIs manually - this is advantageous for smaller images with not too many cells.
 -> The ellipse tool is preselected, bu tany area shape or line is accepted

**Analyze kymograms**
- Implemented extraction of individual traces from direction-filtered kymograms. These are then used for:
 -> analysis of average speeds (all traces)
 -> implemented analysis of average lifetimes (traces that either start and finish within the kymogram or span the whole kymogram)

**Commmit message**
"Implemented analysis of average speeds and lifetimes, and output of results into a csv file. ROIs can now be manually defined using the macro. Big overhaul of function structure and order. Updated comments and help messages. See changelog for details."


16. 5. 2025
**Analyze kymograms**
- analyze average speed and lifetime
 -> tested bilinear and bicubic interpolation when stretching kymograms. While the calculation of these parameters should in theory work better with smoothed images, the interpolation introduces certain artifacts, changing the speeds and lifetimes signlificantly, in some cases. Therefor No interpolation is used here, same as before.
 -> combined the respective functions into a single one, since it works with the same structure and parameters.
 -> changed the time_stretch factor from 10 to 20 to get more accurate readings. Going higher slows down the macro significantly, without providing a significant change in numbers.
 -> added number of traces into the Results table
 -> added calculation of (weighted - by the number of traces) speed averaged from forward and backward traces


19. 5. 2025
**Analyze kymograms**
- fixed 'replace in array' function and weighted average speed and lifetime calculation

v0.2.2.1 commited


22. 5. 2025
**general**
- added option to choose between tangential and transversal images
- 'k' used in all instances then the loops go through filter types (forward, backward, static)
- reorganized the code to reflect the order of functions after the addition of several new ones

**Display kymograms**
- added option to display calculated movement traces
- regular kymograms are now displayed all the time, at the top of the screen, followed by the specified kymogram type
- fixed y-offset issue that arose sometimes when the kymograms just fit into a single row (an empty row was dipslayed between the channels)
- merged images of direction-fitlered kymograms can now also be displayed in greyscale

**Filter kymograms**
- calculation of binary traces is now part of this section, as they need to be available before analysis is started, to calculate overlap images

**Analyze kymograms**
- implemented calculation of overlap trace images, i.e., traces of colocalization/coupling of signals in the two channels defined by the user (in the analysis dialog window, one or two channels have to be specified); these are then analyzed for:
 -> number, speed and lifetime of traces
 -> total fraction of traces overlap, i.e., how much of the signal of the current channel coincides/colocalizes with signal from the other specified channel
 Certain things are calculated multiple times (like the overlap images), but it works
 
** v0.2.3 Commmit message**
"Added options to: choose tangential/transveral image type; display calculated movement traces; display mirection-filtered merge images in greyscale. Implemented calculation of signal coincidence/colocalization (called coupling in the code at the moment) and respective quantififications. See changelog for details."
-------------------------------------------eof-------------------------------------------


**general**
-

**Create kymograms**
-

**Display kymograms**
-

**Filter kymograms**
-

**Analyze kymograms**
-

